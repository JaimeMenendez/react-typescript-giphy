{"version":3,"sources":["Components/NavBar.tsx","Components/Card.tsx","Components/CardsGrid.tsx","Components/App.tsx","index.tsx"],"names":["NavBar","props","className","href","onClick","setLoading","Card","image_url","title","imageLoaded","src","alt","onLoad","CardsGrid","imagenes","useState","loading","counter","useRef","current","console","log","Number","process","Spinner","animation","variant","map","imagen","images","downsized","url","id","App","setImagenes","useEffect","min","max","numberOfImages","offset","Math","floor","random","fetch","then","res","json","data","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4JAOe,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAU,kCAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mBAAGA,UAAU,eAAeC,KAAK,qBAAjC,uBACA,wBAAQD,UAAU,kBAAkBE,QAAS,kBAAMH,EAAMI,YAAW,IAApE,gCCHD,SAASC,EAAT,GAAqE,IAArDC,EAAoD,EAApDA,UAAUC,EAA0C,EAA1CA,MAAMC,EAAoC,EAApCA,YAC3C,OACI,qBAAKP,UAAU,WAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,eACdQ,IAAKH,EACLI,IAAI,GACJC,OAAQH,IAET,qBAAKP,UAAU,YAAf,SACI,oBAAIA,UAAU,YAAd,SAA2BM,W,YCVhC,SAASK,EAAT,GAAiE,IAA5CC,EAA2C,EAA3CA,SAChC,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBX,EAAhB,KACMY,EAAUC,iBAAO,GACjBT,EAAc,WAChBQ,EAAQE,SAAW,EACnBC,QAAQC,IAAIJ,EAAQE,SAChBF,EAAQE,SAAWG,OAAOC,QAC1BlB,GAAW,GACXY,EAAQE,QAAU,IAI1B,OACI,qCACI,qBAAKjB,UAAW,iCAAmCc,EAAU,GAAG,WAAhE,SACI,cAACQ,EAAA,EAAD,CAASC,UAAU,SAASvB,UAAU,QAAQwB,QAAQ,cAG1D,qBAAKxB,UAAW,qCAAuCc,EAAU,UAAY,IAA7E,SACMF,EAASa,KAAI,SAAAC,GACX,OACI,cAACtB,EAAD,CAEIC,UAAWqB,EAAOC,OAAOC,UAAUC,IACnCvB,MAAOoB,EAAOpB,MACdC,YAAaA,GAHRmB,EAAOI,Y,MCWzBC,MAnCf,WACI,MAAgClB,mBAA0B,IAA1D,mBAAOD,EAAP,KAAiBoB,EAAjB,KACA,EAA8BnB,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBX,EAAhB,KAgBA,OAbA8B,qBAAU,WACN,IAwBcC,EAAaC,EAxBvBC,EAAiBhB,OAAOC,MACxBgB,GAuBUH,EAvBY,EAuBCC,EAvBE,IAAOC,GAwBjCE,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,IAAQA,GAxBSE,GAElDtB,GACA2B,MAAM,mGAC6CJ,GAC9CK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAU1C,GAAW,GAAQ6B,EAAYa,EAAKA,SACnDC,OAAM,SAAAC,GAAS7B,QAAQC,IAAI4B,GAAM5C,GAAW,QAEtD,CAACW,IAGA,qCACI,cAAChB,EAAD,CAAQK,WAAYA,IACnBW,EACG,qBAAKd,UAAU,gCAAf,SACI,cAACsB,EAAA,EAAD,CAASC,UAAU,SAASvB,UAAU,QAAQwB,QAAQ,cAExD,cAACb,EAAD,CAAWC,SAAUA,QC3BvCoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7b9f6e9a.chunk.js","sourcesContent":["import React, { Dispatch, ReactElement, SetStateAction} from 'react'\n\ninterface INavBarProps {\n    setLoading:  Dispatch<SetStateAction<boolean>>\n}\n\n\nexport default function NavBar(props: INavBarProps): ReactElement {    \n    return (\n        <nav className=\"navbar navbar-dark bg-dark mb-2\">\n            <div className=\"container\">\n                <a className=\"navbar-brand\" href=\"https://giphy.com/\">GIPHY APP</a>\n                <button className=\"btn btn-success\" onClick={() => props.setLoading(true)}>Cargar random</button>\n            </div>\n        </nav>\n    )\n}\n","import React, { ReactElement } from 'react'\n\ninterface Props {\n    image_url: string,\n    title: string,\n    imageLoaded: () => void\n}\n\n\nexport default function Card({ image_url,title,imageLoaded }: Props): ReactElement {\n    return (\n        <div className=\"col-md-3\" >\n            <div className=\"card\">\n                <img className=\"card-img-top\"\n                 src={image_url} \n                 alt=\"\" \n                 onLoad={imageLoaded}\n                 />\n                <div className=\"card-body\">\n                    <h4 className=\"card-text\">{title}</h4>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { ReactElement, useRef, useState } from 'react'\nimport Card from \"./Card\"\nimport IGifData from \"../Interfaces/IGifData\"\nimport { Spinner } from \"react-bootstrap\";\n\ninterface ICardsGridProps {\n    imagenes: Array<IGifData>\n}\n\nexport default function CardsGrid({ imagenes }: ICardsGridProps): ReactElement {\n    const [loading, setLoading] = useState(true);\n    const counter = useRef(0);\n    const imageLoaded = () => {\n        counter.current += 1;\n        console.log(counter.current);\n        if (counter.current >= Number(process.env.REACT_APP_LIMIT_IMAGES)) {\n            setLoading(false);\n            counter.current = 0\n        }\n    }\n\n    return (\n        <>\n            <div className={\"d-flex justify-content-center\" + (loading ? \"\":\" d-none\")}>\n                <Spinner animation=\"border\" className=\" mt-2\" variant=\"success\" />\n                </div>\n\n            <div className={`row row-cols-1 row-cols-sm-2 m-4 ` + (loading ? \" d-none\" : \"\")}>\n                {(imagenes.map(imagen => {\n                    return (\n                        <Card\n                            key={imagen.id}\n                            image_url={imagen.images.downsized.url}\n                            title={imagen.title}\n                            imageLoaded={imageLoaded}\n                        />\n                    )\n                }))}\n            </div>\n        </>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport NavBar from \"./NavBar\";\nimport CardsGrid from \"./CardsGrid\";\nimport IGifData from \"../Interfaces/IGifData\"\nimport { Spinner } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n    const [imagenes, setImagenes] = useState<Array<IGifData>>([]);\n    const [loading, setLoading] = useState<boolean>(true)\n\n\n    useEffect(() => {\n        let numberOfImages = Number(process.env.REACT_APP_LIMIT_IMAGES);\n        let offset = getRandomInt(0, 5000 / numberOfImages) * numberOfImages\n\n        if (loading) {\n            fetch(\"https://api.giphy.com/v1/gifs/trending?limit=16&api_key=\" +\n                process.env.REACT_APP_GIPHY_KEY + \"&offset=\" + offset)\n                .then(res => res.json())\n                .then(data => { setLoading(false); setImagenes(data.data) })\n                .catch(err => { console.log(err); setLoading(false) })\n        }\n    }, [loading])\n\n    return (\n        <>\n            <NavBar setLoading={setLoading} />\n            {loading ?\n                <div className=\"d-flex justify-content-center\">\n                    <Spinner animation=\"border\" className=\" mt-2\" variant=\"success\" />\n                </div>\n                : <CardsGrid imagenes={imagenes} />}\n        </>\n    )\n}\n\nfunction getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}