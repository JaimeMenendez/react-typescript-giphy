{"version":3,"sources":["Components/NavBar.tsx","Components/Card.tsx","Components/CardsGrid.tsx","Components/App.tsx","index.tsx"],"names":["NavBar","props","className","href","type","id","onClick","setLoading","Card","image_url","title","imageLoaded","src","alt","onLoad","CardsGrid","imagenes","useState","loading","counter","useRef","current","console","log","Number","process","Spinner","animation","variant","style","display","map","imagen","images","downsized","url","App","setImagenes","useEffect","min","max","numberOfImages","offset","Math","floor","random","fetch","then","res","json","data","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAOe,SAASA,EAAOC,GAC3B,OACI,sBAAKC,UAAU,wDAAf,UACI,sBAAKA,UAAU,YAAf,UACI,mBAAGA,UAAU,eAAeC,KAAK,qBAAjC,uBACA,wBAAQD,UAAU,iBAAiBE,KAAK,SAAS,cAAY,WAAW,cAAY,oBAAoB,gBAAc,mBAAmB,gBAAc,QAAQ,aAAW,oBAA1K,SACI,sBAAMF,UAAU,6BAGxB,qBAAKA,UAAU,2BAA2BG,GAAG,mBAA7C,SACI,oBAAIH,UAAU,cAAd,SACI,oBAAIA,UAAU,WAAd,SACI,wBAAQA,UAAU,kBAAkBI,QAAS,kBAAML,EAAMM,YAAW,IAApE,oCCVT,SAASC,EAAT,GAAqE,IAArDC,EAAoD,EAApDA,UAAUC,EAA0C,EAA1CA,MAAMC,EAAoC,EAApCA,YAC3C,OACI,qBAAKT,UAAU,yBAAf,SACI,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,eACdU,IAAKH,EACLI,IAAI,GACJC,OAAQH,IAET,qBAAKT,UAAU,YAAf,SACI,oBAAIA,UAAU,aAAd,SAA4BQ,W,YCVjC,SAASK,EAAT,GAAiE,IAA5CC,EAA2C,EAA3CA,SAChC,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBX,EAAhB,KACMY,EAAUC,iBAAO,GACjBT,EAAc,WAChBQ,EAAQE,SAAW,EACnBC,QAAQC,IAAIJ,EAAQE,SAChBF,EAAQE,SAAWG,OAAOC,QAC1BlB,GAAW,GACXY,EAAQE,QAAU,IAI1B,OACI,qCACI,cAACK,EAAA,EAAD,CAASC,UAAU,SAASzB,UAAU,OAAO0B,QAAQ,UACjDC,MAAO,CAAEC,QAASZ,EAAU,QAAU,UAE1C,qBAAKhB,UAAU,8CACX2B,MAAO,CAAEC,QAASZ,EAAU,OAAS,QADzC,SAEMF,EAASe,KAAI,SAAAC,GACX,OACI,cAACxB,EAAD,CAEIC,UAAWuB,EAAOC,OAAOC,UAAUC,IACnCzB,MAAOsB,EAAOtB,MACdC,YAAaA,GAHRqB,EAAO3B,YCQzB+B,MAhCf,WACI,MAAgCnB,mBAA0B,IAA1D,mBAAOD,EAAP,KAAiBqB,EAAjB,KACA,EAA8BpB,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBX,EAAhB,KAgBA,OAbA+B,qBAAU,WACN,IAqBcC,EAAaC,EArBvBC,EAAiBjB,OAAOC,MACxBiB,GAoBUH,EApBY,EAoBCC,EApBE,IAAKC,GAqB/BE,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,IAAQA,GArBOE,GAEhDvB,GACA4B,MAAM,mGAC6CJ,GAC9CK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAU3C,GAAW,GAAQ8B,EAAYa,EAAKA,SACnDC,OAAM,SAAAC,GAAS9B,QAAQC,IAAI6B,GAAM7C,GAAW,QAEtD,CAACW,IAGA,sBAAKhB,UAAU,qDAAf,UACI,cAACF,EAAD,CAAQO,WAAYA,IACnBW,EAAU,cAACQ,EAAA,EAAD,CAASC,UAAU,SAASzB,UAAU,OAAO0B,QAAQ,YAC1D,cAACb,EAAD,CAAWC,SAAUA,QCxBvCqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d67d3593.chunk.js","sourcesContent":["import React, { Dispatch, ReactElement, SetStateAction} from 'react'\n\ninterface INavBarProps {\n    setLoading:  Dispatch<SetStateAction<boolean>>\n}\n\n\nexport default function NavBar(props: INavBarProps): ReactElement {    \n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\n            <div className=\"container\">\n                <a className=\"navbar-brand\" href=\"https://giphy.com/\">GIPHY APP</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n            </div>\n            <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n                <ul className=\"nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <button className=\"btn btn-success\" onClick={() => props.setLoading(true)}>Cargar random</button>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n","import React, { ReactElement } from 'react'\n\ninterface Props {\n    image_url: string,\n    title: string,\n    imageLoaded: () => void\n}\n\n\nexport default function Card({ image_url,title,imageLoaded }: Props): ReactElement {\n    return (\n        <div className=\"col-lg-3 col-md-6 mb-4\" >\n            <div className=\"card h-100\">\n                <img className=\"card-img-top\"\n                 src={image_url} \n                 alt=\"\" \n                 onLoad={imageLoaded}\n                 />\n                <div className=\"card-body\">\n                    <h4 className=\"card-title\">{title}</h4>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { ReactElement, useRef, useState } from 'react'\nimport Card from \"./Card\"\nimport IGifData from \"../Interfaces/IGifData\"\nimport { Spinner } from \"react-bootstrap\";\n\ninterface ICardsGridProps {\n    imagenes: Array<IGifData>\n}\n\nexport default function CardsGrid({ imagenes }: ICardsGridProps): ReactElement {\n    const [loading, setLoading] = useState(true);\n    const counter = useRef(0);\n    const imageLoaded = () => {\n        counter.current += 1;\n        console.log(counter.current);\n        if (counter.current >= Number(process.env.REACT_APP_LIMIT_IMAGES)) {\n            setLoading(false);\n            counter.current = 0\n        }\n    }\n\n    return (\n        <>\n            <Spinner animation=\"border\" className=\"mt-2\" variant=\"success\"\n                style={{ display: loading ? \"block\" : \"none\" }} />\n\n            <div className=\"container card-group justify-content-center\"\n                style={{ display: loading ? \"none\" : \"flex\" }}>\n                {(imagenes.map(imagen => {\n                    return (\n                        <Card\n                            key={imagen.id}\n                            image_url={imagen.images.downsized.url}\n                            title={imagen.title}\n                            imageLoaded={imageLoaded}\n                        />\n                    )\n                }))}\n            </div>\n        </>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport '../assets/css/app.css';\nimport NavBar from \"./NavBar\";\nimport CardsGrid from \"./CardsGrid\";\nimport IGifData from \"../Interfaces/IGifData\"\nimport { Spinner } from \"react-bootstrap\";\n\nfunction App() {\n    const [imagenes, setImagenes] = useState<Array<IGifData>>([]);\n    const [loading, setLoading] = useState<boolean>(true)\n   \n\n    useEffect(() => {\n        let numberOfImages = Number(process.env.REACT_APP_LIMIT_IMAGES);\n        let offset = getRandomInt(0, 5000/numberOfImages) * numberOfImages\n\n        if (loading) {\n            fetch(\"https://api.giphy.com/v1/gifs/trending?limit=16&api_key=\" +\n                process.env.REACT_APP_GIPHY_KEY + \"&offset=\" + offset)\n                .then(res => res.json())\n                .then(data => { setLoading(false); setImagenes(data.data) })\n                .catch(err => { console.log(err); setLoading(false) })\n        }\n    }, [loading])\n\n    return (\n        <div className=\"container card-group d-flex justify-content-center\">\n            <NavBar setLoading={setLoading} />\n            {loading ? <Spinner animation=\"border\" className=\"mt-2\" variant=\"success\" />\n                : <CardsGrid imagenes={imagenes} />}\n        </div>\n    )\n}\n\nfunction getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}