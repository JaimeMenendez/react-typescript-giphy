{"version":3,"sources":["Components/NavBar.tsx","Components/Card.tsx","Components/CardsGrid.tsx","Components/App.tsx","index.tsx"],"names":["NavBar","props","className","href","onClick","setLoading","Card","image_url","title","imageLoaded","src","alt","onLoad","CardsGrid","images","loadingImages","setLoadingImages","counter","useRef","current","Number","process","Spinner","animation","variant","map","imagen","downsized","url","id","App","useState","imagenes","setImagenes","loading","setLoadingx","error","setError","useEffect","min","max","numberOfImages","offset","Math","floor","random","fetch","then","res","json","data","catch","err","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4JAOe,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAU,kCAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mBAAGA,UAAU,eAAeC,KAAK,qBAAjC,uBACA,wBAAQD,UAAU,kBAAkBE,QAASH,EAAMI,WAAnD,gCCHD,SAASC,EAAT,GAAqE,IAArDC,EAAoD,EAApDA,UAAUC,EAA0C,EAA1CA,MAAMC,EAAoC,EAApCA,YAC3C,OACI,qBAAKP,UAAU,WAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,eACdQ,IAAKH,EACLI,IAAI,GACJC,OAAQH,IAET,qBAAKP,UAAU,YAAf,SACI,oBAAIA,UAAU,YAAd,SAA2BM,W,YCwBhCK,MAhCf,YAA8F,IAAzEC,EAAwE,EAAxEA,OAAOC,EAAiE,EAAjEA,cAAcC,EAAmD,EAAnDA,iBAEhCC,EAAUC,iBAAO,GACjBT,EAAc,WAChBQ,EAAQE,SAAW,EACfF,EAAQE,SAAWC,OAAOC,MAAoC,IAC9DL,GAAiB,GACjBC,EAAQE,QAAU,IAG1B,OACI,qCACI,qBAAKjB,UAAW,iCAAmCa,EAAgB,GAAG,WAAtE,SACI,cAACO,EAAA,EAAD,CAASC,UAAU,SAASrB,UAAU,QAAQsB,QAAQ,cAG1D,qBAAKtB,UAAW,qCAAuCa,EAAgB,UAAY,IAAnF,SACMD,EAAOW,KAAI,SAAAC,GACT,OACI,cAACpB,EAAD,CAEIC,UAAWmB,EAAOZ,OAAOa,UAAUC,IACnCpB,MAAOkB,EAAOlB,MACdC,YAAaA,GAHRiB,EAAOG,a,MCqBzBC,MA7Cf,WACI,MAAgCC,mBAA0B,IAA1D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA+BF,oBAAS,GAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOhB,EAAP,KAAsBC,EAAtB,KACA,EAA0Be,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAgBA,OAbAC,qBAAU,WACN,IAgCcC,EAAaC,EAhCvBC,EAAiBrB,OAAOC,MACxBqB,GA+BUH,EA/BY,EA+BCC,EA/BE,IAAOC,GAgCjCE,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,IAAQA,GAhCSE,GAGlDP,GACAY,MAHM,mGAA0GJ,GAI3GK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAUjB,EAAYiB,EAAKA,MAAOb,GAAS,GAAQF,GAAY,MACpEgB,OAAM,SAAAC,GAASC,QAAQC,IAAIF,GAAMf,GAAS,QAEpD,CAACH,IAGA,qCACI,cAAClC,EAAD,CAAQK,WAAY,WAAQ8B,GAAY,GAAMnB,GAAiB,MAE/D,qBAAKd,UAAW,iCAAmCgC,EAAU,GAAK,WAAlE,SACI,cAACZ,EAAA,EAAD,CAASC,UAAU,SAASrB,UAAU,QAAQsB,QAAQ,cAG7DY,EACG,sBAAKlC,UAAU,yBAAf,iJAAmK,mBAAGC,KAAK,0DAAR,uBAAnK,kEACE,KAGF,qBAAKD,UAAYgC,EAAU,UAAY,GAAvC,SACI,cAAC,EAAD,CAAWnB,cAAeA,EAAeC,iBAAkBA,EAAkBF,OAAQkB,UCpCrGuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0e7523fb.chunk.js","sourcesContent":["import React, { Dispatch, ReactElement, SetStateAction} from 'react'\n\ninterface INavBarProps {\n    setLoading(): void; \n}\n\n\nexport default function NavBar(props: INavBarProps): ReactElement {    \n    return (\n        <nav className=\"navbar navbar-dark bg-dark mb-2\">\n            <div className=\"container\">\n                <a className=\"navbar-brand\" href=\"https://giphy.com/\">GIPHY APP</a>\n                <button className=\"btn btn-success\" onClick={props.setLoading}>Cargar random</button>\n            </div>\n        </nav>\n    )\n}\n","import React, { ReactElement } from 'react'\n\ninterface Props {\n    image_url: string,\n    title: string,\n    imageLoaded: () => void\n}\n\n\nexport default function Card({ image_url,title,imageLoaded }: Props): ReactElement {\n    return (\n        <div className=\"col-md-3\" >\n            <div className=\"card\">\n                <img className=\"card-img-top\"\n                 src={image_url} \n                 alt=\"\" \n                 onLoad={imageLoaded}\n                 />\n                <div className=\"card-body\">\n                    <h4 className=\"card-text\">{title}</h4>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { ReactElement, useRef, useState } from 'react'\nimport Card from \"./Card\"\nimport IGifData from \"../Interfaces/IGifData\"\nimport { Spinner } from \"react-bootstrap\";\n\ninterface ICardsGridProps {\n    images: Array<IGifData>,\n    loadingImages: boolean,\n    setLoadingImages: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nfunction CardsGrid({ images,loadingImages,setLoadingImages }: ICardsGridProps): ReactElement {\n    \n    const counter = useRef(0);\n    const imageLoaded = () => {\n        counter.current += 1;\n        if (counter.current >= Number(process.env.REACT_APP_LIMIT_IMAGES)-1) {\n            setLoadingImages(false);\n            counter.current = 0\n        }\n    }\n    return (\n        <>\n            <div className={\"d-flex justify-content-center\" + (loadingImages ? \"\":\" d-none\")}>\n                <Spinner animation=\"border\" className=\" mt-2\" variant=\"success\" />\n                </div>\n\n            <div className={`row row-cols-1 row-cols-sm-2 m-4 ` + (loadingImages ? \" d-none\" : \"\")}>\n                {(images.map(imagen => {\n                    return (\n                        <Card\n                            key={imagen.id}\n                            image_url={imagen.images.downsized.url}\n                            title={imagen.title}\n                            imageLoaded={imageLoaded}\n                        />\n                    )\n                }))}\n            </div>\n        </>\n    )\n}\n\nexport default CardsGrid","import React, { useEffect, useState } from 'react';\nimport NavBar from \"./NavBar\";\nimport CardsGrid from \"./CardsGrid\";\nimport IGifData from \"../Interfaces/IGifData\"\nimport { Spinner } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n    const [imagenes, setImagenes] = useState<Array<IGifData>>([]);\n    const [loading, setLoadingx] = useState(true)\n    const [loadingImages, setLoadingImages] = useState(true);\n    const [error, setError] = useState(false);\n\n\n    useEffect(function () {\n        let numberOfImages = Number(process.env.REACT_APP_LIMIT_IMAGES);\n        let offset = getRandomInt(0, 1000 / numberOfImages) * numberOfImages;\n        let URL = \"https://api.giphy.com/v1/gifs/trending?limit=16&api_key=\" +process.env.REACT_APP_GIPHY_KEY+ \"&offset=\" + offset ;\n\n        if (loading) {\n            fetch(URL)\n                .then(res => res.json())\n                .then(data => { setImagenes(data.data); setError(false); setLoadingx(false) })\n                .catch(err => { console.log(err); setError(true)});\n        }\n    }, [loading])\n\n    return (\n        <>\n            <NavBar setLoading={() => { setLoadingx(true);setLoadingImages(true)}} />\n\n            <div className={\"d-flex justify-content-center\" + (loading ? \"\" : \" d-none\")}>\n                <Spinner animation=\"border\" className=\" mt-2\" variant=\"success\" />\n            </div>\n\n        {error ?\n            <div className=\"alert alert-danger m-5\">Ha ocurrido un error. Probablemente haya excedido el número máximo de peticiones diarias que ofrece la versión gratuita de <a href=\"https://developers.giphy.com/docs/api#quick-start-guide\">GIPHY API</a>. Solo se permite un máximo de 1000 peticiones al día.</div>\n            : null\n        }\n\n            <div className={(loading ? \" d-none\" : \"\")}>\n                <CardsGrid loadingImages={loadingImages} setLoadingImages={setLoadingImages} images={imagenes} />\n            </div>\n        </>\n    )\n}\n\nfunction getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}